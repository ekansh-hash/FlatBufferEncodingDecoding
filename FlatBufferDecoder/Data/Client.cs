// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Client : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Client GetRootAsClient(ByteBuffer _bb) { return GetRootAsClient(_bb, new Client()); }
  public static Client GetRootAsClient(ByteBuffer _bb, Client obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Client __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Data.ClientType ClientusedType { get { int o = __p.__offset(4); return o != 0 ? (Data.ClientType)__p.bb.Get(o + __p.bb_pos) : Data.ClientType.NONE; } }
  public TTable? Clientused<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Data.Person ClientusedAsPerson() { return Clientused<Data.Person>().Value; }
  public Data.Group ClientusedAsGroup() { return Clientused<Data.Group>().Value; }

  public static Offset<Data.Client> CreateClient(FlatBufferBuilder builder,
      Data.ClientType clientused_type = Data.ClientType.NONE,
      int clientusedOffset = 0) {
    builder.StartTable(2);
    Client.AddClientused(builder, clientusedOffset);
    Client.AddClientusedType(builder, clientused_type);
    return Client.EndClient(builder);
  }

  public static void StartClient(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddClientusedType(FlatBufferBuilder builder, Data.ClientType clientusedType) { builder.AddByte(0, (byte)clientusedType, 0); }
  public static void AddClientused(FlatBufferBuilder builder, int clientusedOffset) { builder.AddOffset(1, clientusedOffset, 0); }
  public static Offset<Data.Client> EndClient(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Data.Client>(o);
  }
  public static void FinishClientBuffer(FlatBufferBuilder builder, Offset<Data.Client> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedClientBuffer(FlatBufferBuilder builder, Offset<Data.Client> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
