// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Group : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Group GetRootAsGroup(ByteBuffer _bb) { return GetRootAsGroup(_bb, new Group()); }
  public static Group GetRootAsGroup(ByteBuffer _bb, Group obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Group __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Average { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Averageweight { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string Names(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NamesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Data.Group> CreateGroup(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      float average = 0.0f,
      float averageweight = 0.0f,
      VectorOffset namesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Group.AddNames(builder, namesOffset);
    Group.AddAverageweight(builder, averageweight);
    Group.AddAverage(builder, average);
    Group.AddName(builder, nameOffset);
    return Group.EndGroup(builder);
  }

  public static void StartGroup(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddAverage(FlatBufferBuilder builder, float average) { builder.AddFloat(1, average, 0.0f); }
  public static void AddAverageweight(FlatBufferBuilder builder, float averageweight) { builder.AddFloat(2, averageweight, 0.0f); }
  public static void AddNames(FlatBufferBuilder builder, VectorOffset namesOffset) { builder.AddOffset(3, namesOffset.Value, 0); }
  public static VectorOffset CreateNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Data.Group> EndGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Data.Group>(o);
  }
};


}
